#  PyCharm Usage LogUse ⌃↑ and ⌃↓ keys to quickly move between methods in the editorUse the ⇧⌘V shortcut to choose and insert recent clipboard contents into the text.The shortcuts such as F1 (View | Quick Documentation), ⌘P (View | Parameter Info), ⌘B (Navigate | Declaration) andothers can be used not only in the editor but in the code completion popup list as well.You can easily override the methods of the base class by pressing ⌃O (Code | Override Methods).To help you learn the purpose of each item in the main menu, its short description is shown in the status bar at thebottom of the application frame when you position the mouse pointer over this item.To open any particular method or field in the editor quickly, press ⌥⌘O (Navigate | Symbol) and start typing its name.Choose symbol from the drop-down list that appears.Use ⌥⇧C to quickly review your recent changes to the project.Use Basic Completion (⌃Space) within HTML, CSS and other files, for completing image file names.With a single keystroke, you can apply another code style/coloring scheme or keymap right from the editor. Just press⌃` (View | Quick Switch Scheme), to specify the scheme you want to change.When in the Go to Class, Go to Symbol, or Go to File popup, you can ease the search by filtering the lookup list withthe help of the "camel words" prefixes.You can easily make column selection by dragging your mouse pointer while keeping the Alt key pressed.You don't need to guess which __init__.py or views.py you are looking at... Make the editor tabs and the lines innavigation lists stand out using the File Colors page of the Appearance & Behavior settings.If nothing is selected in the editor, and you press ⌘C, then the whole line at caret is copied to the clipboard.If you don't want to commit some of your changes to the repository, you can set them aside for a while, by moving to aseparate changelist, or by putting them to a shelf. Select such file in the Local tab of the Changes tool window, andon the context menu choose Move to another changelist, or Shelve Changes.You can move any file to a changelist of your choice. To do that, just choose Move to Changelist on the file contextmenu in the Local Changes tab of the Version Control tool window:You can bring forward the list of all usages of a class, method or variable across the whole project, and quickly jumpto the selected usage. To do that, place the caret at the symbol's name or at its usage in code and press ⌥⌘F7(Edit | Find | Show Usages in the main menu), scroll the list and click the desired usage.To quickly find a menu command or toolbar action, you do not need to look through the menus. Just press ⇧⌘A (Help |Find Action on the main menu) and start typing the name of the action. Choose the desired action from the suggestion list.To quickly find and run an inspection, press ⌥⇧⌘I and start typing the name of the inspection or its group. Choose thedesired inspection from the suggestion list and then specify the desired scope.You can quickly find a setting you need in the Settings/Preferences dialog, without browsing through the numerous options.Just type some characters that, in your opinion, exist in the option description, and the list of settings will reduce tothe matching ones. Select the desired entry, and see the setting that contains the entered characters highlighted:By pressing ⌃⌥R you can access the Run/Debug dropdown on the main toolbar, without the need to use your mouse.You can quickly review all styles currently applied to an HTML tag, by right-clicking the tag name and selecting ShowApplied Styles For Tag from the context menu:You can quickly view the image referenced at caret by using the Quick Definition (⌥Space). The underlying image will beopened in a popup instead of a separate editor tab.It is possible to rename CSS selectors directly from HTML. Position the caret at the selector to be renamed and press ⇧F6 (Refactor | Rename).PyCharm Community Edition simplifies your work with colors in CSS files. The color properties have the icons of the corresponding color in the left gutter area of the editor.Click color icons to choose the desired color from the color picker.Keep your source code typo-free with the help of the built-in Spellchecker.All texts, including comments, textual strings and literals, are inspected against the pre-defined dictionaries.All typos are highlighted, which leaves you with the task of choosing the correct word, accepting the current spelling, or disabling inspection.Use ⌥⏎ to see the list of available actions.If you lack words in the pre-defined dictionaries, you can create your own ones. A custom dictionary is a mere textual file with a .dic extension, with each word starting on a new line.All you have to do is to point to the directories where your dictionaries are stored, in the Spelling page of the Editor Settings/Preferences.A special variant of the Code Completion feature invoked by pressing ⌃Space twice allows you to complete XML tag namesfrom namespaces not declared in the current file. If the namespace is not declared yet the declaration is generated automatically.For the pattern search in the Go to Class, Go to Symbol and Go to File pop-up frames, use * and space symbols.* stands for any symbols.Space at the end means the end of a pattern, and the preceding string will be considered not just a prefix but a whole pattern.The list of the suggested names will be reduced accordingly.All your most indispensable VCS commands are just one-click away...Choose VCS | VCS Operations Popup on the main menu, and get a popup with the VCS commands that are relevant to the current context:You can comment and uncomment lines of code using ⌘/.⌘/ comments or uncomments the current line or several selected lines with single line comments ({# in Django templates, or # in Python scripts).Pressing ⌥⌘/ for a selected block of source code in a Django template surrounds the block with {% comment %} and {% endcomment %} tags.Navigation bar is a quick alternative to the Project view.Use ⌘↑ keyboard shortcut to show the navigation bar, and arrow keys to locate the necessary files or folders.The Local Changes tab of the Version Control tool window shows all deleted, modified, and unversioned files in a single view.Use ⌘9 keyboard shortcut to show or hide this tool window.From the Version Control tool window you can perform all thenecessary version control actions: commit changes, manage changelists, put resources under version control, examine differences and more.When you want to catch exceptions thrown by some code fragment, select it in the editor, press ⌥⌘T (Code | Surround With)and choose try/except. This will automatically generate the except clause.You can work in the Python or Django shell without leaving the IDE. Just choose Run Python Console or Run Django Console in the Tools menu.Working in the interactive consoles, you don't need to memorise the command line syntax or available functions. Instead,you can use the familiar code completion ⌃Space. Moreover, from within the lookup list, you can press F1 to view the item's documentation.If you have already spent some time working in the interactive consoles, you don't need to re-type the previously enteredcommands to repeat them. Instead, press ⌘↑ in default keymap and ⌘↓ in default keymap to scroll through the history of commands.When you press ⌥⏎ to invoke a quick fix or intention action, press the right arrow key to reveal the list of additional options.Depending on the context, you can choose to disable inspection, fix all problems, change inspection profile, etc.Ctrl+Click (on Windows) or Cmd+Click (on MacOS) a tab in the editor to navigate to any part of the file path. Select thenecessary element in the drop-down, and the corresponding file path opens in an external browser (e.g., in the Explorer, if your OS is Windows).PyCharm Community Edition lets you jump from your check-in comment to an issue in your task tracker.All you have to do is to define issue navigation patterns on the Version Control page of the Settings/Preferences dialog:The easiest way to run a utility of the manage.py task is to choose Run manage.py Task in the Tools menu, or press.As you type the name of the utility you want to run, the lookup list shrinks to show the matching entries only.If you type an asterisk, PyCharm will show the complete list of all the available tasks.It's very easy to navigate between the Django templates and referencing views.To do that, use the icons   and   in the left gutter of the editor.Use the Switcher (⌃⇥) to switch between open files and tool windows. Keeping Ctrl pressed, use the Up and Down arrow keys,Tab or Shift+Tab, Alt for navigation; use Delete or BackSpace to close editor tab or hide a tool window.You can easily open an external file for editing, if you just drag it from the Explorer or Finder to the editor.There are two ways of closing all tabs in the editor, except the current one:First, right-click the editor tab, and choose Close Others on the context menu.Second, keeping the Alt key pressed, click   on the editor tab.You can jump directly to any deeply buried file, if you press ⇧⌘O, and type just a couple of characters of the enclosing directories and file names:To open any class or file in the editor at the desired line, press ⇧⌘O (Navigate | File), start typing the name, and choose theone from the suggestion list. Then type the colon (:) and a line number.The selected file will open with the caret at the specified line.You do not need to open a file in the editor to change its line separator style. Use the Project tool window instead: select one or more files, or folders, point to File | Line Separators on the main menu, and then choose the desired line ending style.For a directory, new line separator applies recursively.It is very easy to toggle between find and replace functionality.When you perform search and replace in a file, pressing ⌘F shows the search pane. Pressing ⌘R adds field, where you can type the replace string.While in the Find in Path dialog, you can switch to replace by pressing ⇧⌘R. Same way, press ⇧⌘F to hide the Replace with field, and switch to mere search.When working with a lengthy list of tasks, you don't need to delete them one by one. Select several tasks, using Shift orControl/Command keys, click the right arrow, and then click Remove.If there are too many run/debug configurations of the same type, you can group them into folders, and thus distinguish them visually.While debugging, you might need an interactive console at hand... This is most easy. During the debugging session, switchto the Debugger Console, and then press the very lowest button in its toolbar.The console becomes interactive, and shows a prompt, where you can enter commands, and view output.It is very easy to change the built-in web server port. In the Settings/Preferences dialog, expand the node Build, Execution,Deployment, and click Debugger. Then, use the "Built-in server port" spin box to set the new value.For the embedded local terminal, you can define your favorite shell, default tab name, and other settings. Choose File |Settings (Windows/*nix) or PyCharm | Preferences (Mac) on the main menu, and then open the page Terminal.Find any action, symbol, or setting in PyCharm Community Edition with Double ShiftTo open again one of the recent projects, use Reopen(on Windows and Linux)/Open Recent(on MacOS) on the File menuSpeed up HTML, XML or CSS development with Emmet.Enable this framework in the CSS or HTML pages under the Emmet(Zen Coding) node of the Settings/Preferences dialogYou can switch between sorting completion variants by relevance or alphabetically by using an icon at the bottom right.When using autopopup Code Completion, you can select the first item using ⌃.. The selected name is automatically entered in the editor followed by dot.Enable the horizontal scrolling with the mouse wheel by holding the Shift key.If you've changed a live template, it becomes blue. If you want to return to the original text, right-click such a bluetemplate, and choose Restore defaults on the context menu.you can have multiple cursors. Having pressed Alt, click the left mouse button at the desired position to set additional cursors in the editor.Press ⎋ to remove all the additional cursors but one that resides at the line at caret.Clone the cursor strictly upwards or downwards. To do that, press ⇧⌘A twice, type Clone caret, and then choose the desired action.You don't need to invoke quick documentation explicitly (F1) - if you just move your mouse pointer over the desired symbol, the quick documentation pop-up window will show automatically.To enable this feature, select the check box Show quick doc on mouse move in the General page of the editor settingsPyCharm Community Edition makes it possible to launch the embedded local terminal using keyboard only. Press ⌥F12, and see the terminal running.PyCharm Community Edition makes it possible to launch the embedded local terminal using keyboard only. Press ⌥F12, and see the terminal running.Did you know that you can edit both opening and closing tags in XML/HTML files ?Make sure to select the check box Simultaneous <tag></tag> editing in the Smart keys page of the Editor settings/preferences.Have you noticed the buttons    marking differences in the Differences viewer?You can simply apply differences between panes, by clicking one of these chevron buttons.Keep the Ctrl key pressed, and the chevron buttons change to   . Click one of these buttons to append contents of the current pane of the Differences viewer to the other pane.If you keep Shift pressed, the chevrons turn into  . Click this button to revert changes.Hover your mouse pointer over a warning, error stripe or just some section of source code on the scroll bar outside of the scroll box, and you will see a lens.Make your printouts (File | Print) nice and informative with the help of keywords.For example, use $DATE$ and $TIME$ to specify the exact date and time of the printout.Did you know that it's possible to copy rich text ?Make sure that the check box Copy rich text by default in the General page of the Editor settings/preferences is selectedTo see all the available scratch files, choose Scratches view in the Project tool window.A special variant of the Code Completion feature invoked by pressing ⌃Space twice allows you to complete XML tag namesfrom namespaces not declared in the current file. If the namespace is not declared yet the declaration is generated automatically.# command + oTo open any class in the editor quickly, press ⌘O (Navigate | Class) and start typing the name of the class. Choose the class from a drop-down list that appears.A special variant of the Code Completion feature invoked by pressing ⌃Space twice allows you to complete the name of anyclass no matter if it was imported in the current file or not. If the class is not imported yet, the import statement isgenerated automatically.You can quickly find all places where a particular class, method or variable is used in the whole project by positioningthe caret at the symbol's name or at its usage in code and pressing ⌥F7 (Find Usages in the popup menu).To quickly see the documentation for the symbol at caret, press F1 (View | Quick Documentation).To navigate to the declaration of a class, method or variable used somewhere in the code, position the caret at the usageand press ⌘B. You can also click the mouse on usages with the Ctrl key pressed to jump to declarations.You can quickly navigate in the currently edited file with ⌘F12 (Navigate | File Structure).It shows the list of members of the current class. Select an element you want to navigate to and press the Enter key or the ⌘↓ key.To easily locate an item in the list, just start typing its name.You can easily rename your local variables with automatic correction of all places where they are used.To try it, place the caret at the variable you want to rename, and press ⇧F6 (Refactor | Rename). Type the new name inthe popup window that appears, or select one of the suggested names, and press Enter.When using Code Completion, you can accept the currently highlighted selection in the popup list with ⇥ key.Unlike accepting with the ⏎ key, the selected name will overwrite the rest of the name to the right of the caret.This can be especially useful for replacing one method or variable name with another.Did you know that you can close tabs in the editor and the tool windows of PyCharm Community Edition without actuallyusing the context menu commands? It is enough to point with your mouse cursor to a tab to be closed, and click the middlemouse button, or just use the Shift+click combination.To quickly select the currently edited element (class, file, method or field) in any view (Project view, Structure view or other),press ⌥F1.The speed search is available in all the tree views: just start typing and you'll quickly locate the necessary item.The ⎋ key in any tool window moves the focus to the editor.⇧⎋ moves the focus to the editor and also hides the current (or last active) tool window.The F12 key moves the focus from the editor to the last focused tool window.⌥↑ (extend selection) in the editor selects the word at the caret and then selects expanding areas of the source code.For example, it may select a method name, then the expression that calls this method, then the whole statement, then thecontaining block, etc. You can also select the word at the caret and the expanding areas of the source code by double-clickingthe target areas in the editor.The Extract Variable refactoring helps you simplify complicated statements in your code. For example, in the code fragmentbelow, you can select an expression in the code, and press ⌥⌘V (Refactor | Extract | Variable).⌘D in the editor duplicates the selected block or the current line when no block is selected.For example, select a code fragment and press ⇧⌘↑ or ⇧⌘↓.The ⌃⇧J shortcut joins two lines into one and removes unnecessary spaces to match your code style.If the cursor is between the parentheses of a method call, pressing ⌘P brings up a list of valid parameters.xxx().demo()  # commod + P⇧⌘⌫ (Navigate | Last Edit Location) brings you back to the last place where you made changes in the code.Pressing ⇧⌘⌫ a few times moves you deeper into your changes history.⌘E (View | Recent Files) brings a popup list of the recently visited files. Choose the desired file and press Enter to open it.# 生信创点  command +Use the ⇧⌘V shortcut to choose and insert recent clipboard contents into the text.The shortcuts such as F1 (View | Quick Documentation), ⌘P (View | Parameter Info), ⌘B (Navigate | Declaration) and otherscan be used not only in the editor but in the code completion popup list as well.You can easily override the methods of the base class by pressing ⌃O (Code | Override Methods).To open any particular method or field in the editor quickly, press ⌥⌘O (Navigate | Symbol) and start typing its name.Choose symbol from the drop-down list that appears.Use ⌥⇧C to quickly review your recent changes to the project.Use Basic Completion (⌃Space) within HTML, CSS and other files, for completing image file names.With a single keystroke, you can apply another code style/coloring scheme or keymap right from the editor. Just press ⌃` (View | Quick Switch Scheme), to specify the scheme you want to change.When in the Go to Class, Go to Symbol, or Go to File popup, you can ease the search by filtering the lookup list with thehelp of the "camel words" prefixes.